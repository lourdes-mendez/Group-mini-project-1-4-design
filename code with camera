# -*- coding: utf-8 -*-
"""
Created on Thu Feb 20 15:53:37 2020

@author: amand
"""
import random
import pandas as pd
import numpy as np
import cv2

df = pd.read_csv('miniqbank.csv')

engineering_bank = df[df['category'] == 'Engineering For Dummies']
rosenberg_bank = df[df['category'] == 'Rosenberg Wisdom']
ru_bank = df[df['category'] == 'R-U-RAH-RAH']
new_jersey_bank = df[df['category'] == 'NeW jErSeY']
old_shows_bank = df[df['category'] == 'Old TV Shows']
sports_bank = df[df['category'] == 'Sports']

scorecard = np.array([[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]])

def camera_determine_color():
    cap = cv2.VideoCapture(0)
    while True:
        #camera setup
        _,  frame = cap.read()
        hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        #setting up colors
        #red color
        low_red=np.array([161,155,84])
        high_red=np.array([179,255,255])
        red_mask = cv2.inRange(hsv_frame, low_red, high_red)
      #  red = cv2.bitwise_and(frame, frame, mask=red_mask)
        #blue
        low_blue= np.array([94,80,2])
        high_blue=np.array([126,255,255])
        blue_mask=cv2.inRange(hsv_frame, low_blue, high_blue)
      #  blue = cv2.bitwise_and(frame, frame, mask=blue_mask)
        #green
        low_green= np.array([25,30,30])
        high_green=np.array([85,255,255])
        green_mask=cv2.inRange(hsv_frame, low_green, high_green)
       # green = cv2.bitwise_and(frame, frame, mask=green_mask)
        #yellow
        low_yellow= np.array([20,100,100])
        high_yellow=np.array([30,255,255])
        yellow_mask=cv2.inRange(hsv_frame, low_yellow, high_yellow)
       # yellow = cv2.bitwise_and(frame, frame, mask=yellow_mask)
        #orange
        low_orange= np.array([5,50,50])
        high_orange=np.array([15,255,255])
        orange_mask=cv2.inRange(hsv_frame, low_orange, high_orange)
       # orange = cv2.bitwise_and(frame, frame, mask=orange_mask)
        #purple
        low_purple= np.array([135,30,30])
        high_purple=np.array([145,255,255])
        purple_mask=cv2.inRange(hsv_frame, low_purple, high_purple)
       # purple = cv2.bitwise_and(frame, frame, mask=purple_mask)
        #white
        low_white= np.array([0,0,30])
        high_white=np.array([180,25,255])
        white_mask=cv2.inRange(hsv_frame, low_white, high_white)
       # white = cv2.bitwise_and(frame, frame, mask=white_mask)
        
        #check for other colors and white background
        mask = purple_mask+orange_mask+yellow_mask+green_mask+blue_mask+red_mask
        background=white_mask-(purple_mask+orange_mask+yellow_mask+green_mask+blue_mask+red_mask)
        colore = 'defining'
        #output color
        if np.array_equal(background, white_mask):
            print("roll the dice")
        elif np.array_equal(mask, purple_mask):
            colore = 'purple'
            print("purple")
        elif np.array_equal(mask, green_mask):
            colore= 'green'
            print("green")
        elif np.array_equal(mask, orange_mask):
            colore= 'orange'
            print("orange")
        elif np.array_equal(mask, yellow_mask):
            colore='yellow'
            print("yellow")
        elif np.array_equal(mask, blue_mask):
            colore='blue'
            print("blue")
        elif np.array_equal(mask, red_mask):
            colore='red'
            print("red_mask")
        else:
            print("error")
        
        #shows color masks
       # cv2.imshow("mask",mask)
        #cv2.imshow("white",white_mask)
       # cv2.imshow("frame",frame)
       # cv2.imshow("red",red_mask)
        #cv2.imshow("blue",blue_mask)
       # cv2.imshow("green",green_mask)
       # cv2.imshow("yellow",yellow_mask)
      #  cv2.imshow("purple",purple_mask)
       # cv2.imshow("orange",orange_mask)
       
       # camera refresh rate and break
        key=cv2.waitKey(1000)
        return colore
        if key==ord('q'):
            break

def determine_category(colore):
##all color names below are subject to change based on what colors are on the die
    if colore == 'purple':
        category = 'Engineering for Dummies'
    elif colore == 'green':
        category = 'Rosenberg Wisdom'
    elif colore == 'orange':
        category = 'R-U-RAH-RAH'
    elif colore == 'yellow':
        category = 'NeW jErSeY'
    elif colore == 'blue':
        category = 'Old TV Shows'
    else:
        category = 'Sports'
    print('The category is:',category)
    return category
    
def get_correct_bank(category, engineering_bank, rosenberg_bank, ru_bank, new_jersey_bank,old_shows_bank,sports_bank):
    if category == 'Engineering for Dummies':
        return engineering_bank
    elif category == 'Rosenberg Wisdom':
        return rosenberg_bank
    elif category == 'R-U-RAH-RAH':
        return ru_bank
    elif category == 'NeW jErSeY':
        return new_jersey_bank
    elif category == 'Old TV Shows':
        return old_shows_bank
    else: 
        return sports_bank
        
    
def select_question(correct_bank):
    question = correct_bank.sample(n=1)
    return question

def determine_player():
    rand_turn = random.randint(1,4)
    if rand_turn == 1:
        player = 'Player 1'
    elif rand_turn == 2:
        player = 'Player 2'
    elif rand_turn == 3:
        player = 'Player 3'
    else:
        player = 'Player 4'
    print('It is', player, '\'s turn')
    return player

def display_q(question):
    print(question['question'].iloc[0]) #change this
    return

def get_guess():
    guess = input('Answer here:')
    return guess

def check_answer(user_guess, question):
    answer = question['answer'].iloc[0]
    simple_answer = answer.lower()
    simple_guess = user_guess.lower()
    if simple_guess == simple_answer:
        return True
    else:
        return False
   
def give_feedback(valid):
    if valid:
        print('Correct!')
    else:
        print('Incorrect')
        
def remove_question(my_bank, my_q):
    my_bank = my_bank[my_bank.index != my_q.index[0]]
    return my_bank

def keep_score(category, player, valid):
    global scorecard
    if valid:
        if category == 'Engineering for Dummies':
            if player == 'Player 1':
                scorecard[0,0] = scorecard[0,0] + 1
            elif player == 'Player 2':
                scorecard[1,0] = scorecard[1,0] + 1
            elif player == 'Player 3':
                 scorecard[2,0] = scorecard[2,0] + 1
            else:
                 scorecard[3,0] = scorecard[3,0] + 1
               
        elif category == 'Rosenberg Wisdom' :
             if player == 'Player 1':
                scorecard[0,1] = scorecard[0,1] + 1
             elif player == 'Player 2':
                scorecard[1,1] = scorecard[1,1] + 1
             elif player == 'Player 3':
                 scorecard[2,1] = scorecard[2,1] + 1
             else:
                 scorecard[3,1] = scorecard[3,1] + 1
        elif category == 'R-U-RAH-RAH':
             if player == 'Player 1':
                scorecard[0,2] = scorecard[0,2] + 1
             elif player == 'Player 2':
                scorecard[1,2] = scorecard[1,2] + 1
             elif player == 'Player 3':
                 scorecard[2,2] = scorecard[2,2] + 1
             else:
                 scorecard[3,2] = scorecard[3,2] + 1
        elif category == 'NeW jErSeY':
             if player == 'Player 1':
                scorecard[0,3] = scorecard[0,3] + 1
             elif player == 'Player 2':
                scorecard[1,3] = scorecard[1,3] + 1
             elif player == 'Player 3':
                 scorecard[2,3] = scorecard[2,3] + 1
             else:
                 scorecard[3,3] = scorecard[3,3] + 1
        elif category == 'Old TV Shows':
             if player == 'Player 1':
                scorecard[0,4] = scorecard[0,4] + 1
             elif player == 'Player 2':
                scorecard[1,4] = scorecard[1,4] + 1
             elif player == 'Player 3':
                 scorecard[2,4] = scorecard[2,4] + 1
             else:
                 scorecard[3,4] = scorecard[3,4] + 1
        else:
             if player == 'Player 1':
                scorecard[0,5] = scorecard[0,5] + 1
             elif player == 'Player 2':
                scorecard[1,5] = scorecard[1,5] + 1
             elif player == 'Player 3':
                 scorecard[2,5] = scorecard[2,5] + 1
             else:
                 scorecard[3,5] = scorecard[3,5] + 1
    else:
        scorecard = scorecard
    print(scorecard)
    return scorecard
            
       
def play_single_turn():
    color = camera_determine_color()
    category = determine_category(color)
    my_bank = get_correct_bank(category,engineering_bank, rosenberg_bank, ru_bank, new_jersey_bank,old_shows_bank,sports_bank)
    my_q = select_question(my_bank)

    player = determine_player()
    
    display_q(my_q)
    the_guess = get_guess()
    valid = check_answer(the_guess,my_q)
    give_feedback(valid)
    keep_score(category, player,valid)
    remove_question(my_bank,my_q)
    return valid

i=0
while i < 3:
    points = 0
    score = play_single_turn()
    i += 1
